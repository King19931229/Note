【2019-05-04】shell
[shell baisc]
#https://blog.csdn.net/Michaelwubo/article/details/81698307
1.num=10(delcare a var,note that space is not allowed on both = side.)
2.declare -r NUM=10(declare a const, note that space is not allowed on both = side.)
3.num=$((num+10)) ($((exp)) exp calcuation need two( and one $, you can put space between ().)
4.let num=num+10(or let num+=10) (another way to do math calcuation use keyword let.)
5.num=$((num++)) num=$((++num)) (self increment or self decrement.)
6.
a=10.5
b=3.3
c=$(python -c "print $a+$b")
echo $c
(use python to do float calcuation a hack way.)
7.
cat<<MSG
This is a short message.
MSG
(print a message to the console)
[function]
1.declare and use a function
getDate()
{
        date
        return
}
getDate
output: 2019年 05月 04日 星期六 16:36:00 CST
2.delcare local var
name=king
testfunc()
{
        local name=yang
        return
}
testfunc
echo $name
output: king
3.pass var into a function
sumfunc()
{
        local v1=$1
        local v2=$2
        local sum=$((v1+v2))
        echo $sum
}
sumfunc 10 20
sum=$(sumfunc 10 20)
echo sum of 10 and 20 is $sum
output:
30
sum of 10 and 20 is 30
(first 30 produced by direct call, the second one collect the res into sum then use echo to output it)
[condition]
# https://www.cnblogs.com/wangcp-2014/p/6704375.html
1.receive input
read -p "what is your name " name
echo $name
2.condition branch
read -p "what is your age " age
echo your age is $age
if [ $age -eq 18 ]
then
	echo you are just adult
elif [ $age -lt 18 ]
then
        echo you are not adult
else
        echo you are more than adult
fi
(note that 'then' can't be right after ']' unless you put a ';' after that ']'
and space must be contained between '[' and ']' also
'fi' must occur to indicate close of the condition branch)

another approch:
if [ $age -eq 18 ]; then echo you are just adult
elif [ $age -lt 18 ]; then echo you are not adult
else echo you are more than adult

you can put two '(' to a compartion with using '$' and '['
third approch:
if ((age == 18)); then echo you are just adult
elif ((age < 18)); then echo you are not adult
else echo you are more than adult
fi

one more example:
if (( (($age%2)) == 0 )); then echo your age is even
#if [ $(($age%2)) -eq 0 ]; then echo your age is even
else echo your age is odd
fi

string compare example:
str1=hello
str2=world

if [ $str1 = $str2 ]; then echo str1==str2
elif [[ $str1 < $str2 ]]; then echo str1\<str2
else echo str1\>str2
fi

output: str1<str2

note that if((exp)) is not useful for string compare
also for string compare '=' MUST be used, don't use '=='
if you use '<' or '>' for string double '[' --> '[[' is needed otherwise use '\<'
and string compare must use '=', '>', '<', -eq -nq... is not allowed

【2019-05-06】【1】XCode 共享文件夹
打开XCode工程 Info
添加一项 Application supports iTunes file sharing = TRUE
【2019-05-06】【2】Mac finder 显示全路径
打开终端输入: defaults write com.apple.finder _FXShowPosixPathInTitle -bool TRUE;killall Finder

【2019-05-12】【1】shell
1.regular expression compare
example:
read -p 'input a phone number: ' phone
phone_format='^[1-9][0-9]{10}$'
if [[ $phone =~ $phone_format ]]; then echo phone number is vaild
fi
input a phone number: 1234567891
output: phone number is vaild

2.IFS
IFS The Internal Field Separator that is used for word splitting after expansion and to split lines into words with the read builtin command.
The default value is space,tab,newline

example:
function test()
{
        echo '\$* is '$*''
        for arg in $*
        do
                echo $arg
        done
}
args="this is a test message"
echo split paramters by space,tab,line
test $args
IFS=","
echo split paramters by ,
test $args
args="this,is,a,test,message"
test $args

output:
split paramters by space,tab,line
\$* is this is a test message
this
is
a
test
message
split paramters by ,
\$* is this is a test message
this is a test message
\$* is this is a test message
this
is
a
test
message

3.replacement for variable
replace string in var by using ${var// /}

[:alnum:]  Alphanumeric characters.
[:alpha:]  Alphabetic characters.
[:blank:]  Space or tab characters.
[:cntrl:]  Control characters.
[:digit:]  Numeric characters.
[:graph:]  Characters that are both printable and visible.  (A space is printable, but not visible, while an a is both.)
[:lower:]  Lower-case alphabetic characters.
[:print:]  Printable characters (characters that are not control  characters.)
[:punct:]  Punctuation characters (characters that are not letter, digits, control characters, or space characters).
[:space:]  Space characters (such as space, tab, and formfeed, to  name a few).
[:upper:]  Upper-case alphabetic characters.
[:digit:] Characters that are hexadecimal digits.

example:
args="this is a test message"
args=${args//t/T}
echo $args
#args=${args// /}
args=${args//[[:space:]]/}
echo $args

output:
This is a TesT message
ThisisaTesTmessage

【2019-05-12】【2】shell parameter expansion
1.if the variable is not declared use newvalue instead
${var-newvalue}
2.if the variable is not declared or the the vaule of variable is empty, use newvalue instead
${var:-newvalue}
3.if the variable is not declared use newvalue instead, also assign the value into variable
${var=newvalue}
4.if the variable is not declared or the the vaule of variable is empty, use newvalue instead
, also assign the value into variable
${var:=newvalue}

example:
name=
#if the variable of name is not declared use king instead
echo 'echo '${name-"king"}
#if the variable of name is not declared or the vaule of variable the is empty, use king instead
echo 'echo '${name:-"king"}
echo vaule of name is $name

echo '--------------------'
#if the variable of name2 is not declared use king instead also assign to name2
echo 'echo '${name2="king"}
echo vaule of name2 is $name2

echo '--------------------'
name3=
#if the variable of name3 is not declared or the the vaule of variable is emtpy, use king instead, also assign to name3
echo 'echo '${name3:="king"}
echo vaule of name3 is $name3

output:
echo 
echo king
vaule of name is
--------------------
echo king
vaule of name2 is king
--------------------
echo king
vaule of name3 is king

【2019-05-12】【3】shell case
case $var in
# value could be a regular expression
value)
	#do something if var is value
	:;;
value2)
	#do something if var is value2
	:;;
*)
	#fallback. do something for fallback case
	:;;
esac

example:
read -p "input your age: " age
case $age in
[0-4])
	echo "age is between 0 to 4";;
5)
	echo "age is 5";;
[6-9]|1[0-2])
	echo "age is between 6 to 12";;
#fallback
*)
	echo "you age is above 12";;
esac

read -p "do you want to goto work? yes or no: " work
case $work in
yes)
	echo "wow. you really want to goto work";;
no)
	echo "yeah. i don't want to goto work either";;
*)
	echo "your answer is not either yes or no";;
esac

input:25
output:you age is above 12

input:no
output:yeah. i don't want to goto work either

【2019-05-12】【4】ternary operator
(( exp ? (assigment for true) : (assigment for false) ))

example:
read -p "input your age: " age
(( age >= 18 ? (work=1) : (work=0) ))
if ((work)); then
        echo you can you to work now
else
        echo you can not go work. great
fi

input:25
output:you can you to work now

【2019-05-14】python metacalss
# https://www.cnblogs.com/iamswf/p/4713749.html
你可以在实现一个类的时候为其添加__metaclass__属性
这是该类的元类 类默认的元类是type
元类就是创建类对象的类 可以把元类看做"类工厂"
创建类对象时候python会在内存中通过__metaclass__创建类对象
如果python没有找到__metaclass__ 它会继续在父类中寻找__metaclass__ 以此类推
如果还是找不到__metaclass__ python就会用内置的type元类来创建这个类对象
例:
class MetaTest(type):
	def __new__(mcs, name, bases, dict):
		print "name: ", name
		print "bases: ", bases
		print "dict: ", dict

		TEST_PROP = dict.get('TEST_PROP', '')
		dict["TEST_PROP"] = "MODIFY TEST PROP"

		return super(MetaTest, mcs).__new__(mcs, name, bases, dict)

class TestClass(object):
	__metaclass__ = MetaTest
	TEST_PROP = "TEST PROP"

if __name__ == '__main__':
	t = TestClass()
	print t.TEST_PROP
输出:
name:  TestClass
bases:  (<type 'object'>,)
dict:  {'__module__': '__main__', '__metaclass__': <class '__main__.MetaTest'>, 'TEST_PROP': 'TEST PROP'}
MODIFY TEST PROP