【2019-05-04】shell
[shell baisc]
#https://blog.csdn.net/Michaelwubo/article/details/81698307
1.num=10(delcare a var,note that space is not allowed on both = side.)
2.declare -r NUM=10(declare a const, note that space is not allowed on both = side.)
3.num=$((num+10)) ($((exp)) exp calcuation need two( and one $, you can put space between ().)
4.let num=num+10(or let num+=10) (another way to do math calcuation use keyword let.)
5.num=$((num++)) num=$((++num)) (self increment or self decrement.)
6.
a=10.5
b=3.3
c=$(python -c "print $a+$b")
echo $c
(use python to do float calcuation a hack way.)
7.
cat<<MSG
This is a short message.
MSG
(print a message to the console)
[function]
1.declare and use a function
getDate()
{
        date
        return
}
getDate
output: 2019年 05月 04日 星期六 16:36:00 CST
2.delcare local var
name=king
testfunc()
{
        local name=yang
        return
}
testfunc
echo $name
output: king
3.pass var into a function
sumfunc()
{
        local v1=$1
        local v2=$2
        local sum=$((v1+v2))
        echo $sum
}
sumfunc 10 20
sum=$(sumfunc 10 20)
echo sum of 10 and 20 is $sum
output:
30
sum of 10 and 20 is 30
(first 30 produced by direct call, the second one collect the res into sum then use echo to output it)
[condition]
1.receive input
read -p "what is your name " name
echo $name
2.condition branch
read -p "what is your age " age
echo your age is $age
if [ $age -eq 18 ]
then
	echo you are just adult
elif [ $age -lt 18 ]
then
        echo you are not adult
else
        echo you are more than adult
fi
(note that 'then' can't be right after ']' unless you put a ';' after that ']'
and space must be contained between '[' and ']' also
'fi' must occur to indicate close of the condition branch)

another approch:
if [ $age -eq 18 ]; then echo you are just adult
elif [ $age -lt 18 ]; then echo you are not adult
else echo you are more than adult

you can put two '(' to a compartion with using '$' and '['
third approch:
if ((age == 18)); then echo you are just adult
elif ((age < 18)); then echo you are not adult
else echo you are more than adult
fi

one more example:
if (( (($age%2)) == 0 )); then echo your age is even
#if [ $(($age%2)) -eq 0 ]; then echo your age is even
else echo your age is odd
fi

string compare example:
str1=hello
str2=world

if [ $str1 = $str2 ]; then echo str1==str2
elif [[ $str1 < $str2 ]]; then echo str1\<str2
else echo str1\>str2
fi

output: str1<str2

note that if((exp)) is not useful for string compare
also for string compare '=' MUST be used, don't use '=='
if you use '<' or '>' for string double '[' --> '[[' is needed otherwise use '\<'
and string compare must use '=', '>', '<', -eq -nq... is not allowed

【2019-05-12】shell
1.regular expression compare
example:
read -p 'input a phone number: ' phone
phone_format='^[1-9][0-9]{10}$'
if [[ $phone =~ $phone_format ]]; then echo phone number is vaild
fi
input a phone number: 1234567891
output: phone number is vaild

2.IFS
IFS The Internal Field Separator that is used for word splitting after expansion and to split lines into words with the read builtin command.
The default value is space,tab,newline

example:
function test()
{
        echo '\$* is '$*''
        for arg in $*
        do
                echo $arg
        done
}
args="this is a test message"
echo split paramters by space,tab,line
test $args
IFS=","
echo split paramters by ,
test $args
args="this,is,a,test,message"
test $args

output:
split paramters by space,tab,line
\$* is this is a test message
this
is
a
test
message
split paramters by ,
\$* is this is a test message
this is a test message
\$* is this is a test message
this
is
a
test
message

3.replacement for variable
replace string in var by using ${var// /}

[:alnum:]  Alphanumeric characters.
[:alpha:]  Alphabetic characters.
[:blank:]  Space or tab characters.
[:cntrl:]  Control characters.
[:digit:]  Numeric characters.
[:graph:]  Characters that are both printable and visible.  (A space is printable, but not visible, while an a is both.)
[:lower:]  Lower-case alphabetic characters.
[:print:]  Printable characters (characters that are not control  characters.)
[:punct:]  Punctuation characters (characters that are not letter, digits, control characters, or space characters).
[:space:]  Space characters (such as space, tab, and formfeed, to  name a few).
[:upper:]  Upper-case alphabetic characters.
[:digit:] Characters that are hexadecimal digits.

example:
args="this is a test message"
args=${args//t/T}
echo $args
#args=${args// /}
args=${args//[[:space:]]/}
echo $args

output:
This is a TesT message
ThisisaTesTmessage