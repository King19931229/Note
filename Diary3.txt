【2018-03-06】【1】C#数据
对于结构赋值操作是拷贝内容
对于类则是增加引用技术
但是对于String却也是拷贝内容
struct ValueContain
{
	public int value;
};
或者
class ValueContain
{
	public int value;
};

// 对于结构可以省略 = new ValueContain();
ValueContain val = new ValueContain();
val.value = 10;

ValueContain val2 = val;
val2.value = 20;

Console.WriteLine("{0}", val.value);

结构输出的是10 类输出的是20


String str = "A";
String str2 = str;
str2 = "B";

Console.WriteLine("{0}", str);
输出 A

【2018-03-06】【2】C# Region
仅仅用于编辑器折叠代码使用
#region MyRegion
#endregion

【2018-03-06】【3】Python argparse
# https://www.jianshu.com/p/fef2d215b91d
import argparse

# 1.新建一个解析器
parser = argparse.ArgumentParser(
	# description 可选
	description="test case"
)

# 2.添加一个名字为arg0的定位参数
parser.add_argument("arg0")

# 3.添加一个可选参数
一种是通过一个-来指定的短参数 如-h
一种是通过--来指定的长参数 如--help
parser.add_argument("-v", "--verbosity")
# 注意如果长短参数同时存在则
# 通过 args = parser.parse_args() 访问 args 的参数成员只能用长参数访问 args.verbosity

# 4.避开设定值
parser.add_argument("-v", "--verbose", action="store_true")
# 这样指定参数时就不能设定参数值并且参数值为true 如果action="store_false"则参数值为false

# 5.设定值类型
parser.add_argument("x", type=int)
# 这样值类型不为int则报错

# 6.设定值范围
parser.add_argument("x", type=int, choices=[1,2,3])
# 这样值不为 1 or 2 or 3 则报错

# 7.添加help信息
parser.add_argument("x", type=int, help="args help")

# 8.设定默认参数
parser.add_argument("-v", "--verbose", default=1)
# 这样值不被指定时将会用默认值1 注意只能对可选参数使用

# *9.设置互斥参数
group = parser.add_mutually_exclusive_group()
group.add_argument("-v", "--verbose", action="store_true")
group.add_argument("-q", "--quiet", action="store_true")
# 这样 -v 和 -q 不能同时出现

【2018-03-07】SimplePref使用
// http://www.jishux.com/plus/view-672770-1.html
// https://zhuanlan.zhihu.com/p/25277481
// http://www.dpull.com/blog/2018-02-22-simpleperf
// https://developer.android.com/ndk/guides/simpleperf.html
下载最新的NDK 目录里有个simpleperf文件夹 运行里面的app_profiler.py进行剖析
如: python app_profiler.py -p com.xxx.yyy.zzz -nc -r "--duration 10 -g --call-graph dwarf" -nb
生成perf.data文件 运行report.py进行分析
如: python report.py --full-callgraph -g caller --gui --children

【2018-04-02】【1】Python面向对象
#coding=utf-8
class Test:
	# 类文档
	'Test Class'
	# 类成员 相当于C++类静态变量
	count = 0

	# 通常传入的第一个参数叫self 这里为了突出self不是关键字
	# 起名为address
	def __init__(address, name):
		print address
		# 新增一个对象属性
		address._name = name
		Test.count += 1

	def PrintName(self):
		print self._name

	def ModifyName(self, name):
		# 修改一个对象属性
		self._name = name

	def DeleteName(self):
		del self._name

# 实例化对象 隐式传入对象地址作为__init__的第一个参数
t0 = Test("Test")

t0.ModifyName("ModifyName")
t0.PrintName()
t0.DeleteName()

# t0.PrintName()

# 输出类成员
print Test.count

【2018-04-02】【2】Python面向对象
#coding=utf-8
class Test:
	# 类文档
	'Test Class'
	# 类成员 相当于C++类静态变量
	count = 0

	# 通常传入的第一个参数叫self 这里为了突出self不是关键字
	# 起名为address
	def __init__(address, name):
		print address
		# 新增一个对象属性
		address._name = name
		Test.count += 1

	def PrintName(self):
		print self._name

	def ModifyName(self, name):
		# 修改一个对象属性
		self._name = name

	def DeleteName(self):
		del self._name

t0 = Test("Name")

# 输出True
print hasattr(t0, "_name")
# 输出False
print hasattr(t0, "_age")

# 输出Name
print getattr(t0, "_name")
# 报错不存在属性_age
# print getattr(t0, "_age")

# 删除属性_name
delattr(t0, "_name")

# 报错不存在属性_age)
# delattr(t0, "_age"

setattr(t0, "_name", "NewName")

# 不存在属性_age 输出Name 避免抛出异常
print getattr(t0, "_age", "Name")