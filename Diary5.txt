【2018-07-20】Python with
// https://www.cnblogs.com/DswCnblog/p/6126588.html
// https://www.ibm.com/developerworks/cn/opensource/os-cn-pythonwith/index.html
紧跟with后面的语句被求值后 返回对象的__enter__()方法被调用 这个方法的返回值将被赋值给as后面的变量
当with后面的代码块全部被执行完之后 将调用前面返回对象的__exit__()方法
例:
class MyClass(object):
	def __enter__(self):
		print "__enter__"
		return "enter"
	def __exit__(self, type, value, trace):
		print "__exit__"

with MyClass() as message:
	print message
输出:
__enter__
enter
__exit__

【2018-08-23】【1】Python map与reduce
map()是 Python 内置的高阶函数 它接收一个函数 f 和一个 list
并通过把函数 f 依次作用在 list 的每个元素上 得到一个新的 list 并返回
例：
myList = [1, 2, 3, 4, 5, 6, 7]
myList2 = [7, 6, 5, 4, 3, 2, 1]
# myList myList2 的元素分别作为lambda的输入
mul_list = map(lambda x, y: x * y, myList, myList2)
print mul_list

def sqrt(x):
	import math
	return math.sqrt(x)

# myList 的元素 作为 sqrt的输入
sqrt_list = map(sqrt, myList)
print sqrt_list

def add(x, y):
	return x + y

输出:
[7, 12, 15, 16, 15, 12, 7]
[1.0, 1.4142135623730951, 1.7320508075688772, 2.0, 2.23606797749979, 2.449489742783178, 2.6457513110645907]

reduce() 函数会对参数序列中元素进行累积
函数将一个数据集合（链表 元组等）中的所有数据进行下列操作
用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作
得到的结果再与第三个数据用 function 函数运算 最后得到一个结果

例:
myList = [1, 2, 3, 4, 5, 6, 7]
sqrt_list = map(sqrt, myList)
print sqrt_list

def add(x, y):
	return x + y

list_sum = reduce(add, myList)
print list_sum 
输出:
28

【2018-08-23】【2】Python *与**
例:
加了星号*的变量名会存放所有未命名的可变参数
def func(x, *args):
	print "x:", x
	# args 为一个 tuple
	print "args:", args

func(10, 20, 30)
输出：
x: 10
args: (20, 30)

例:
加了星号**的变量名会存放所有未命名的关键字参数
def func(x, **kwagrs):
	print "x:", x
	# kwagrs 为一个 dict
	print "kwagrs:", kwagrs

func(10, y = 20, z = 30)
输出：
x: 10
args: {'y': 20, 'z': 30}

【2018-08-23】【3】list 另类赋值
list = [1, 2, 3, 4, 5]
# 遍历 list 对每一个元素 x 用 x * x 作用生成一个新的 sqr_list 
sqr_list = [x * x for x in list]
print sqr_list
输出:
[1, 4, 9, 16, 25]

【2018-08-23】【4】sum 遍历一个可迭代对象并求和
例:
list = [1, 2, 3, 4, 5]
sum_res = sum(list)
print sum_res
输出:
15

【2018-10-08】Android Studio
AndroidManifest.xml位置
Android
	项目
		manifests
			AndroidManifest.xml

.gradle位置
Project
	项目
		build.gradle
	build.gradle
	settings.gradle

【2018-10-12】Python 字典值修改
dic = {'a':0, 'b':0}
for key, val in dic.items():
	# 并没有修改字典中的值
	# val = 1
	# 这样才真正修改了
	dic[key] = 1
print dic
输出:
{'a': 1, 'b': 1}

【2018-10-31】【1】Python变量修改
idx = 0
# 遍历过程中实际上修改了上面定义的idx的值
for idx in xrange(10):
	pass
print idx
输出:
9

【2018-10-31】【2】Python列表判空
def check(item):
	if item:
		print 1
	else:
		print 0
item = [1, 2]
check(item)
item = []
check(item)
输出:
1
0

【2018-11-15】【1】Python import
1.函数内import module结束函数调用后module不会释放
例:
-->main.py(顶层脚本)
def test():
	import test
	test.val = 1

test()
import test
print test.val

-->test.py
val = 0
输出:
1

2.脚本不会被import多于1次 对于顶层脚本被import后__name__将不再是__main__(与顶层脚本不是同一个脚本)
例:
1.
-->main.py(顶层脚本)
print "module:", __name__
import test

-->test.py
print "module:", __name__
import main

-->test2.py
print "module:", __name__
import test
输出:
module: __main__
module: test
module: test2
2.
-->main.py(顶层脚本)
print "module:", __name__
import test

-->test.py
print "module:", __name__
import main
输出:
module: __main__
module: test
module: main

【2018-11-15】【2】Python判空
Python对象判空 Python类有__nonzero__方法用于判断对象BOOL值 通常用于if语句中
对于特殊类型 list dict tuple 可以直接用if语句判断是否为空
例:
def judge(obj):
	if obj:
		print "obj is True"
	else:
		print "obj is False"

class Test(object):
	def __init__(self, val):
		self.val = val
	def __nonzero__(self):
		return self.val

t = Test(False)
judge(t)
t = Test(True)
judge(t)

dict = {}
list = []
tuple = ()

if not dict:
	print "empty dict"

if not list:
	print "empty list"

if not tuple:
	print "empty tuple"

输出:
obj is False
obj is True
empty dict
empty list
empty tuple

【2018-11-21】【1】Python filter关键字
listA = [1,2,3,4,5,6,7,8,9,10]
listB = filter(lambda x: x % 2 == 0, listA)
print listB
输出:
[2, 4, 6, 8, 10]

【2018-11-21】【2】Python list comprehension
# https://www.cnblogs.com/dadadechengzi/p/6292156.html
list comprehension
[expr for iter_var in iterable ] or [expr for iter_ in iterable if cond_expr]
例:
listA = [1,2,3,4,5,6,7,8,9,10]
listB = [e**2 for e in listA]
print listB
listB = [e for e in listA if e % 2 == 0]
print listB
listB = [3 for e in listA]
print listB
输出:
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
[2, 4, 6, 8, 10]
[3, 3, 3, 3, 3, 3, 3, 3, 3, 3]

【2018-11-22】Python generator expression
# https://www.cnblogs.com/dadadechengzi/p/6292156.html
注意 generator 只能遍历一次
generator expression
(expr for iter_var in iterable) or (expr for iter_var in interable if cond_expr)
例:
listA = [1,2,3,4,5,6,7,8,9,10]
genA = (e**2 for e in listA)
print genA
for e in genA:
	print e