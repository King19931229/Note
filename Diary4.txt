【2018-04-12】Python字符编码
str是字节串 根据源码的保存格式可能是gbk也可能是utf-8或者其他
unicode是宽字节字符串 格式是utf-16

str.decode(源字节串编码方式) --> unicode
unicode.encode(目标字节串编码方式) --> str

可以使用chardet模块检测str的编码格式(chardet需要自己安装)

例:
 # -*- coding: utf-8 -*-
import sys
import chardet

s = "Python encode() 方法 和 decode() 方法"

print chardet.detect(s)

# 对str进行解码
s = s.decode("utf-8")
# s = unicode(s, "utf-8")
print "s is unicode", isinstance(s, unicode)

# 对unicode进行编码
s = s.encode('utf-8')
print "s is str", isinstance(s, str)

# 对str进行解码
s = s.decode("utf-8")
print "s is unicode", isinstance(s, unicode)

# 对unicode进行编码
s = s.encode("gb2312")
print "s is str", isinstance(s, str)
print chardet.detect(s)

输出:
{'confidence': 0.9690625, 'language': '', 'encoding': 'utf-8'}
s is unicode True
s is str True
s is unicode True
s is unicode False
{'confidence': 0.99, 'language': 'Chinese', 'encoding': 'GB2312'}

【2018-04-13】Python二分查找模块bisect
Python里可以用bisect实现二分查找减少代码量
bisect.bisect_left(a, x, lo=0, hi=len(a)) 查找在a中插入x的位置 若存在与x相同的值 则返回第一个相同值的索引
类似于c++的lower_bound

bisect.bisect_right(a, x, lo=0, hi=len(a)) 查找在a中插入x的位置 若存在与x相同的值 则返回最后一个相同值的索引+1
类似于c++的upper_bound

【2018-04-17】Qt Graphics View体系结构
QGraphicsScene 为管理大量的items提供一个快速的接口 本身并不可见它只管理item
QGraphicsItem QGraphicsScene中所有item的基类
QGraphicsView 用来监视场景QGraphicsScene 实现其可视化
坑:
QGraphicsItem::boundingRect 返回的才是该item在场景QGraphicsScene中的实际位置
QGraphicsItem::scenePos 和 QGraphicsItem::x QGraphicsItem::y 并不是

【2018-05-23】【1】Python is 与 == 区别
1.is用于判断两个对象是否是同一个对象 即对象地址是否相同
2.==用于判断两个对象内容是否相同 允许对象地址不同 会调用对象的__eq__方法(注意自定义
类的默认__eq__方法是比较对象地址是否相同)
例1:
class Test:
	def __init__(self, val):
		self._val = val

	# def __eq__(self, other):
	# 	return self._val == other._val

t0 = Test(10)
t1 = Test(10)

print t0 is t1
print t0 == t1

t1 = t0

print t0 is t1
print t0 == t1

输出:
False
False
True
True

例2:
class Test:
	def __init__(self, val):
		self._val = val

	def __eq__(self, other):
		return self._val == other._val

t0 = Test(10)
t1 = Test(10)

print t0 is t1
print t0 == t1

输出:
False
True

【2018-05-23】【2】Python 对象__dict__属性
# https://blog.csdn.net/lis_12/article/details/53521554
Python下一切皆对象 每个对象都有多个属性(attribute) Python对属性有一套统一的管理方案
1.非内建对象有__dict__属性 (__dict__是一个字典 key为属性名 val为属性的值)
2.实例的__dict__仅存储与该实例相关的实例属性
3.类的__dict__存储所有实例共享的变量和函数(类属性，方法等) 类的__dict__并不包含其父类的属性

例:
class TestBaseClass():
	def base_func(self):
		pass

class TestClass(TestBaseClass):
	def __init__(self, val):
		self._val = val

	def print_val(self):
		print self._val

int_val = 10
list_val = []
object_val = TestClass(int_val)

# 无效 内建对象没有__dict__属性
# print int_val.__dict__
# print list_val.__dict__

print TestBaseClass.__dict__
print TestClass.__dict__
print object_val.__dict__

# 相当于 object_val.print_val()
TestClass.__dict__["print_val"](object_val)

输出:
{'base_func': <function base_func at 0x02E5F930>, '__module__': '__main__', '__doc__': None}
{'__module__': '__main__', 'print_val': <function print_val at 0x02E5F870>, '__doc__': None, '__init__': <function __init__ at 0x02E5F970>}
{'_val': 10}
10

【2018-05-23】【3】Python dir函数
1.dir()是Python提供的一个API函数 dir()函数会自动寻找一个对象的所有属性(包括从父类中继承的属性)
2.dir()函数返回对象一个列表 里面储存的值为对象属性名
3.内建对象也可以使用dir()函数

例:
class TestBaseClass():
	def base_func(self):
		pass

class TestClass(TestBaseClass):
	def __init__(self, val):
		self._val = val

	def print_val(self):
		print self._val

int_val = 10
list_val = []
object_val = TestClass(int_val)

print dir(TestBaseClass)
print dir(TestClass)
print dir(object_val)

输出:
['__doc__', '__module__', 'base_func']
['__doc__', '__init__', '__module__', 'base_func', 'print_val']
['__doc__', '__init__', '__module__', '_val', 'base_func', 'print_val']

【2018-05-28】Python多重继承
除了从一个父类继承外 Python允许从多个父类继承 称为多重继承
例:
class BaseA(object):
	def __init__(self):
		# 一定要加上这句 否则派生类调用super(*, self).__init__()将不会调到
		# 此基类的__init__
		super(BaseA, self).__init__()

		print "BaseA::__init__"
		self._val = 'A'

	def base_func(self):
		print "BaseA::func", self._val

class BaseB(object):
	def __init__(self):
		# 一定要加上这句 否则派生类调用super(*, self).__init__()将不会调到
		# 此基类的__init__
		super(BaseB, self).__init__()

		print "BaseB::__init__"
		self._val = 'B'

	def base_func(self):
		print "BaseB::func", self._val

class Derived(BaseA, BaseB):
	def __init__(self):
		super(Derived, self).__init__()

# 输出:
# BaseB::__init__
# BaseA::__init__
derived = Derived()

# 会调用到BaseA::func
# 多重继承下基类尽量不要有同名函数
# 输出:
# BaseA::func A
derived.base_func()

# 显式调用BaseB::func
# 输出:
# BaseB::func A
BaseB.base_func(derived)

# 输出:
# {'_val': 'A'} 即使是多重继承 某一成员对象只有一份
print derived.__dict__

# 输出: True
print isinstance(derived, object)
# 输出: True
print isinstance(derived, BaseA)
# 输出: True
print isinstance(derived, BaseB)
# 输出: True
print isinstance(derived, Derived)

【2018-06-04】Python 字符串转bool坑
Python不能直接用类型转换把字符串转成bool
bool("True") 与 bool("False") 值相同都为True
bool转换在Python中 除了‘’ "" 0 () [] {} None为False 其他转换都为True
所有只能通过字符串比较转换
True if data == "True" else False

【2018-06-08】C++ Python 交互
// https://www.cnblogs.com/findumars/p/7124031.html
通过C++调用Python脚本主要要用到一些Python提供的API
因为实际上C++要调用的是Python的解释器
例:
C++:
// 定义Python方法
static PyObject* Sum(PyObject* self, PyObject *args)
{
	int a, b;
	if(!PyArg_ParseTuple(args, "ii", &a, &b))
	{
		printf("args wrong\n");
		return Py_False;
	}
	PyObject* ret = Py_BuildValue("i", a + b);
	if(ret)
		return ret;
	return Py_None;
}

static PyObject* Sub(PyObject* self, PyObject *args)
{
	int a, b;
	if(!PyArg_ParseTuple(args, "ii", &a, &b))
	{
		printf("args wrong\n");
		return Py_False;
	}
	PyObject* ret = Py_BuildValue("i", a - b);
	if(ret)
		return ret;
	return Py_None;
}

static PyMethodDef CalcMethods[] =
{
	// {方法名, 方法, 参数类型 通常为METH_VARARGS, 方法doc}
	{"sum", Sum, METH_VARARGS, "calauate the sum"},
	{"sub", Sub, METH_VARARGS, "calauate the sub"},
	{NULL, NULL}
};

int main()
{
	// 初始化Python环境
	Py_Initialize();
	// 启动Python多线程支持
	PyEval_InitThreads();

	if(!Py_IsInitialized())
	{
		printf("Init fail\n");
		return -1;
	}
	// C++ 往 Python 注入模块 （模块名, 方法列表, 模块doc)
	PyObject* module = Py_InitModule3("calcuate", CalcMethods, "calcuate methods");
	if(!module)
	{
		printf("Init module fail\n");
		return -1;
	}
	// C++ import Python模块 (模块名）
	module = PyImport_ImportModule("main");
	// 获取Python对象属性 相当于Python getattr
	PyObject* function = PyObject_GetAttrString(module, "Test");

	if(function)
	{
		// 将C数据转化为Python数据
		// https://blog.csdn.net/vampirem/article/details/12948955
		PyObject* args = Py_BuildValue("(ii)", 10, 20);
		if(args)
		{
			// 调用Python函数
			PyObject* pyret = PyObject_CallObject(function, args);
			if(pyret)
			{
				bool ret = false;
				// 解析Python对象转化为C数据
				if(PyArg_Parse(pyret, "b", &ret))
				{
					printf("The return value from python: %d\n", ret);
				}
				Py_DecRef(pyret);
			}
			Py_DecRef(args);
		}
		Py_DecRef(function);
	}

	Py_Finalize();
}

Python: main.py
import calcuate

def Test(a, b):
	print calcuate.__doc__
	print calcuate.__dict__

	print calcuate.sum.__doc__, getattr(calcuate, "sum")(a, b)
	# calcuate.sum(a, b)
	print calcuate.sub.__doc__, getattr(calcuate, "sub")(a, b)
	# calcuate.sub(a, b)

	return True

输出:
calcuate methods
{'__name__': 'calcuate', 'sum': <built-in function sum>, 'sub': <built-in function sub>, '__doc__': 'calcuate methods', '__package__': None}
calauate the sum 30
calauate the sub -10
The return value from python: 1

【2018-06-26】用SVN的SubWCRev管理同步项目版本号
// http://blog.sina.com.cn/s/blog_75c9af020102vgh2.html
// https://blog.csdn.net/flyfish1986/article/details/42493715
1.添加TortoiseSVN的bin文件夹到环境变量path里
2.定义一个版本头文件模版
如: editor_version_template.h
#define EDITOR_MAJOR_VERSION 0
#define EDITOR_MINOR_VERSION 1
#define EDITOR_REVISION_VERSION 0
#define	EDITOR_BUILD_NUMBER $WCREV$ 
#define EDITOR_FLAG "beta"
3.在项目的预先生成事件命令行里加入命令以生成版本头文件
如:
subwcrev $(SolutionDir) $(ProjectDir)editor_version_template.h $(ProjectDir)editor_version.h
4.项目引用生成出的版本头文件获取版本号

【2018-07-18】解决adb端口占用问题
// https://www.jianshu.com/p/953dfe231479
adb devices
emulator-5554   device
emulator-5582   host
emulator-5580   host
emulator-5584   host
windows下dos命令窗口输入netstat -ano即可查看端口使用情况
例如要查看8080端口号是否已经被占用就使用命令netstat -ano|findstr 8080
找出当前的进程pid与端口的对应关系
然后根据pid结束该进程
taskkill /PID PID

【2018-07-19】Python闭包变量
// http://cndenis.iteye.com/blog/1754743
在Python中 函数内部可以定义函数
内层的函数可以读取外层函数的内置类型局部变量 但却不可以修改它
例1:
def myFunc():
	val = 10
	def subFunc():
		print val
	subFunc()

myFunc()
输出:10

例2:
def myFunc():
	val = 10
	def subFunc():
		print val
		val = 20
	subFunc()

myFunc()
报错 UnboundLocalError: local variable 'val' referenced before assignment

这个错误在Python 3.x中的解决方法是使用新增的关键词nonlocal
但Python 2.x中没有这个关键词 可以使用对象属性解决
例:
class MyClass(object):
	pass

def myFunc():
	o = MyClass()
	o.val = 10
	def subFunc():
		print o.val
		o.val = 20
	subFunc()
	print o.val

myFunc()
输出:10 20