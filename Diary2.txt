【2017-12-24】【1】Android开发概念回顾
1.JDK
http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk8-downloads-2133151-zhs.html
JDK是 Java 语言的软件开发工具包 主要用于移动设备 嵌入式设备上的java应用程序 
JDK是整个java开发的核心 它包含了JAVA的运行环境(JVM+Java系统类库)和JAVA工具

2.ADT
Android Developer Tools
安卓开发工具 Google研发的一个插件
集成在eclipse中，为安卓开发提供专属开发环境
简单的说ADT就是Android在Eclipse上的开发工具
在Eclipse和SDK之间起到了一个桥梁的作用

3.NDK
https://www.cnblogs.com/crowsong/p/6737780.html
Native Development Kit 
Android NDK是一个让开发人员在Android应用中嵌入使用本地代码编写的组件的工具集
提供了一系列的工具，帮助开发者快速开发C(或C++)的动态库 并能自动将so和java应用一起打包成apk

4.ANT
Apache的一个项目管理工具
是一个可将软件编译 测试 部署等步骤联系在一起加以自动化的工具
大多用于Java环境中的软件开发

5.LLDB
https://segmentfault.com/a/1190000005738395
LLDB是一个高效的c/c++的调试器 是与LLVM编译器一起使用

【2017-12-24】【2】Android Studio技巧
1.Alt + Enter 自动补全缺少的库

【2018-01-12】gflags 查越界访问
http://blog.csdn.net/zcc1414/article/details/38396411
1.下载WinDbg工具
2.用管理员权限运行cmd
3.使用命令
gflags /p /enable KAPP.exe /full [/unaligned]
跟踪进程(/unaligned Win10用不了)
gflags /p /disable KAPP.exe
撤销跟踪
原理是: 当有堆分配的时候 在分配的内存的后面放上几个守护字节(Guard Bytes)

【2018-01-17】C++ Map初始化技巧
typedef std::map<int, int> MapType;
typedef MapType::value_type ValueType;
// 定义ValueType数组
ValueType values[] = 
{
	std::map<int, int>::value_type(1, 1),
	std::map<int, int>::value_type(2, 2),
	std::map<int, int>::value_type(3, 3)
};
// 用ValueType数组初始化对应的Map
MapType myMap(values, values + sizeof(values) / sizeof(ValueType));

【2018-01-23】【1】C#学习
1.c#内置三种引用类型 object、dynamic 和 string
2.当一个值类型转换为对象类型时 则被称为装箱
另一方面 当一个对象类型转换为值类型时则被称为 拆箱
3.System.Object(可以用object关键字)是C#所有通用数据类型的终极基类
4.dynamic是动态数据类型关键字 类型检查是在运行时发生的
5.C# string 字符串的前面可以加 @(称作"逐字字符串")将转义字符（\）当作普通字符对待
6.在类型后面加上?表示该类型是可空类型(Nullable)[string是Nullable]
7.Null 合并运算符(??)
double? num1 = null;
double? num2 = 3.14157;
double num3;
num3 = num1 ?? 5.34;
Console.WriteLine("num3 的值： {0}", num3);
num3 = num2 ?? 5.34;
Console.WriteLine("num3 的值： {0}", num3);

num3 的值： 5.34
num3 的值： 3.14157

【2018-01-23】【2】C#数组
1.数组是引用类型
2.数组声明: 类型[]
3.创建数组：new 类型[数组大小]
4.示例:
int[] array；
array = new int[10];

【2018-01-23】【3】C#结构
1.若自定义构造函数不能没有参数
2.构造函数需要初始化所有成员
3.当使用 new 操作符创建一个结构对象时 会调用适当的构造函数来创建结构
与类不同 结构可以不使用 new 操作符即可被实例化
struct HelloStruct
{
	public HelloStruct(string _name)
	{
		name = _name;
		Console.WriteLine("HelloStruct Call");
	}
	public string name;
}

HelloStruct hs;
HelloStruct hs2 = new HelloStruct("hi");
4.结构不支持继承

【2018-01-23】【4】C#枚举
1.访问枚举成员必须带有枚举类型名称(与C++不同)
enum MyEnum
{
	E0,
	E1,
	E2
}
int x = (int)MyEnum.E0;
2.不允许在函数内部定义枚举

【2018-01-24】【1】C#多态
1.C#类中定义抽象函数时其所在类也必须定义成抽象类
abstract class Base
{
	public abstract void Print();
}

2.C#类中定义与基类相同函数(在基类声明为虚函数)
必须加关键字override(重写)或者new(覆盖)

class Base
{
	public virtual void Print()
	{
		Console.WriteLine("Base");
	}
}

class Derived : Base
{
	public new void Print()
	{
		Console.WriteLine("Derived");
	}
}

// 若Print函数关键字为new则输出结果为Base
// 若将Print函数关键字改为override则输出结果为Derived
Derived derived = new Derived();
Base mybase = derived;
mybase.Print();

【2018-01-24】【2】C#接口
1.接口定义
interface Base
{
	// 不能加 virtual 或者 public 关键字
	void Print();
}
2.实现接口
class Derived : Base
{
	public void Print()
	{
		Console.WriteLine("Impl");
	}
}
3.接口可以继承接口
interface Base
{
	void Print();
}

interface Base2 : Base
{
	void Print2();
}

class Derived : Base2
{
	public void Print()
	{
		Console.WriteLine("Impl");
	}

	public void Print2()
	{
		Console.WriteLine("Impl2");
	}
}